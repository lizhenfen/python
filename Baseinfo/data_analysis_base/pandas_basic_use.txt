软件安装：
	yum install python-pandas
	pip install pandas 
数据准备：
	导入需要的库：
		import pandas as pd 
		from pandas import Series,DataFrame
数据结构：
	Series：系列；
		修改时不在原数据上保存
		存储一行或一列以及与之相关的索引的集合
	DataFrame：数据框
		
数据输入:
	手动创建：
		ser_input = range(10)
		ser = Series(ser_input)
		data = {'state': ['Ohio','Ohio','Ohio'],
				'year': [2000,2001,2002],
				'pop': [1.5,1.7,3.6],
				}
		df = DataFrame(data)
	文件输入:
		csv文件:
			#导入中文, 指定编码方式
			pd.read_csv(file_path,sep=',',encoding="UTF-8")
		文本文件：
			# names：指定列名
			pd.read_table(file_path,names=[],sep='\t')
		Excel文件:
			#sheetname: sheet名称
			pd.read_excel(file_path,sheetname='',names=[])
	数据库：
		pd.read_sql(sql,con)
		pd.read_sql_table()
		pd.read_sql_query()
	其他方式：
		剪切板：pd.read_clipboard()
		网页：pd.read_html()
		JSON: pd.read_json()
		PICKLE: pd.read_pickle()
	帮助：
		更多用法：
			help()
			参考官方网站
数据输出：
	#DataFrame实例的方法
	csv文件：
		#index: 是否导出索引
		#header: 是否导出列名
		to_csv(file_path,sep=',',index=True,header=True)
	json:
		to_json()
	Excwel:
		to_excel()
基本方法：
	初始ser:
		ser1 = Series(['a',True,1],index=['first','second','third'])
		增：
			新增序列指定索引：
				add_ser = new_ser = Series(['1','2'],index=['four','five'])
				ser1.append(add_ser)
			新增序列不指定索引：
				add_ser = new_ser = Series(['1','2'])
				ser1.append(add_ser)
			强调： 
				新增加的序列若不指定索引,默认从0开始
				无法修改原序列,若要修改结果需要重新赋值原序列
		删：	
			通过索引删除
				ser1.drop('second')
			通过值删除
				del ser1['first'] 
			通过索引的位置：
				ser1.drop(ser1.index[2])  
		改： 
			ser1['first'] = "new_value"
		查：
			ser1[0]  #默认索引
			ser1['first']
			ser1[[0,2]] #多值
			ser1[1:2]  #切片
		过滤：
			ser1[ser1.values != 1]
		是否存在：
			判断索引是否存在：
				1 in ser1
			判断值是否存在：
				1 in ser1.values
	初始DataFrame:
		data = {'state': ['Ohio','Ohio','Ohio'],
				'year': [2000,2001,2002],
				'pop': [1.5,1.7,3.6],
				}
		df = DataFrame(data,index=['first','second','third'])
		增：
			行：
				df.loc[len(df)+1] = [1,2004,'Ohio']
			列：
				df['name'] = ['lizhen','lz','a','2']
		删： 
			按行索引：
				df.drop('first')
			按列索引：
				df.drop('pop',axis=1)
				del df['tc']
			
		改：
			修改行索引：
				df.index = range(1,4)  #len(index) 需要相同
			修改列索引：
				df.columns = ['tc','ss','yr']
		查：
			行索引：
				df.index
			列索引：
				df.columns
			按行：
				df[0:2]  	#行默认索引
				df.iloc[1]  #行默认索引
				df.loc['first']  #行非默认索引
			按列：
				df['state']  #列名
				df[[1,2]] 或 df[['pop','state']]   #多列
				
			按字段：
				df.iloc[1,2]  #行号，列号，必须整数索引
				df.at['first','pop']  #非默认索引,必须使用指定的索引
其他：
	查看名称：
		索引名称:
			df.index.name
		列名：
			dfcolumns.name
	
向量化运算： 	
	同一时刻多个数据或序列应用同一个命令
	序列：
		rnum = np.arange(0.01,0.5,0.01)
		n  = 2
		四则运算：
			+: 
				等长：
					rnum + rnum
				非等长：
					rnum + n
			-:
				等长：
					rnum - rnum
			/:
				等长：
					rnum * rnum
			*:
				等长：
					rnum / rnum
		函数式:
			np.power(rnum,n)
			np.dot(rnum,rnum.T)
			np.sum(rnum+1)
		数据选取：
			rnum > 0.5
			r[rnum > 0.5]
	数据框：
		df = DataFrame({
			'data1':np.random.randn(10),
			'data2':np.random.randn(10)
		}
		)
		数据过滤：
			df.apply(lambda x: x.min()) #列 
			df.apply(lambda x: x.min(),axis=1) #行 
		数据选取：
			df.apply(lambda x: np.all(x>0))
			df.apply(lambda x: np.all(x>0),axis=1)
	优化原则：
		尽量少使用for循环
		过早的优化就是魔鬼
重复数据处理：
	1. 删除数据中重复的值
		df.drop_dumplicates()
缺失数据处理：
	处理方式:
		数据补齐
		删除缺失的数据行
		不处理
	删除缺失的数据行：
		df.dropna()
空值数据处理：
	去除字符串的空格
		new_colunmn = df['column_name'].str.strip()
		df['column_name'] = new_colunmn
		
日期数据处理：
	时间格式转换：
		format:
			%Y %m %d %H %M %S  #年月日时分秒
		datetime_str = df['datetiem_column_name']	
		df_dt = pd.to_datetime(datetime_str,format=format)
	日期格式化：
		import datetime
		format = "%d/%m/%Y"
		changed_format = datetime.datetime.strftime(x,format)
		df_dt_str = df_dt.apply(lambda x: changed_format)
	抽取指定的时间：
		df_dt = pd.to_datetime(datetime_str,format=format)
		格式： df_dt.dt.property
		property取值： year,month,day,hour,minute,second 
		实例：
			df_dt.dt.year
字段抽取：
	#抽取其中的一部分数据
	#字段中只存在数字时,默认类型为Int
	#字段抽取时,转换类型为字符型
	df['column'] = df['column'].astype(str)
	df.str.slice(star_pos,end_pos)
字段拆分：
	#把一个字段拆分成指定列
	split(sep_split_str,column_num,True/False)
		sep_split_str: 分割符
		column_num： 切分列数
		True/False：使用新列/使用列表
	data = df['column_name'].str.split(' ',2,True)
	data.columns = ['column_name_1','column_name_2','column_name_3']
记录抽取：
	比较：
		>,<,!=,==
	范围：
		between(left,right)
	空值：
		pd.isnull(obj)
		pd.notnull)(obj)
	字符包含：
		#na=False 去除空值
		str.contains(pattern,na=False)  #包含字符串
	逻辑运算：
		&，|，not
随机抽样：
	start: 开始
	end: 结束
	num:抽样数
	np.random.randint(start,end,num)
记录合并：
	concat([dataframe1,dataframe2])
字段合并：
	先转换成str
	df = df.astype(str)
	使用+连接符串联
字段匹配：
	merge(dataframe1,dataframe2,left_on,right_on)
数据标准化：
	o-1标准化： (x-min)/(max-min)
	scores = (df.column - df.column.min()) / (df.column.max() - df.column.min())
	df['score-0-1'] = scores
数据分组：
	#series: df.column 分组的数据
	#bins: 分组划分的分数组
	#right: 右端是否闭合
	#labels： 自定义标签
	pd.cut(series,bins,right=True,labels=NULL)

统计：	
  #df 为读入数据的变量	
  基本:

	df.column_name.var(） #方差
	df.column_name.mean() #平均差
	df.column_name.size   #大小
	其他统计函数： describe(),sum(),std(),max(),min()
  分组：
	df.groupby(by=['group_by_column_name']).agg({'outpu_column_name': describe_func})

  分布：
	
	1. 增加分布属性
	    数据分组
	2. 分组统计
  交叉(透视表):
	pivot_table(values,index,columns,aggfunc,fill_value)
	values: 数据透视表中的值(用于进行分析的列)
	index：数据透视表中的行（透视表表的行索引得值）
	columns：数据透视表中的列(透视表的列的值)
	aggfunc：统计函数
	fill_value： NA值 需要统一转换	


