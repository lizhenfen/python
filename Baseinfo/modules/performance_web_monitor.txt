模块： pycurl 
参考： http://pycurl.sourceforge.net/doc/index.html
支持： ftp,http,https,telnet等。curl命令的python封装
实现：响应的HTTP状态码，请求延时，http头信息，下载速度等

安装： 
	pip install pycurl
	easy_install pycurl
	源码安装：
		若要支持curl-config包，需要源码安装
		wget http://curl.haxx.se/download/curl-7.36.0.tar.gz
		./configure && make && make install 
		export LD_LIBREARY_PATH=/usr/local/lib
		wget https://pypi.python.org/packages/source/p/pycurl/pycurl-7.19.3.1.tar.gz  --no-check-certiflcate
		python setup.py install --curl-config=/usr/local/bin/curl-config
	    检验： import pycurl ; pycurl.version
实现：
	pycurl.Curl(): 创建一个libcurl包的Curl句柄对象
		licurl：参考http://curl.haxx.se/libcurl/c/libcurl-tutorial.html
	close(): 无参数，实现关闭、回收Curl对象，对应libcurl的curl_easy_clieanup
	perform(): 请求，提交。对应libcurl的curl_easy_perform
	setopt(option,value): option通过libcurl的常量指定，value依赖option,可以是字符串，整型，文件对象，列表
	实例：
		c = pycurl.Curl()
		c.setopt(pycurl.CONNECTTIMEOUT,5) #连接等待时间，0不等待
		c.setopt(pycurl.TIMEOUT,5)  #超时时间
		c.setopt(pycurl.NOPROGRESS,0)  #非0则屏蔽
		c.setopt(pycurl.MAXREDIRS,5)   #指定http重定向的最大数
		c.setopt(pycurl.FORBID_REUSE,1) #完成交互后强制端开，不重用
		c.setopt(pycurl.FRESH_CONNECT,1) #强制获取新的连接，即替代缓存中的连接
		c.setopt(pycurl.DNS_CACHE_TIMEOUT,60)  #保存dns信息的时间，默认120s
		c.setopt(pycurl.URL,"http://www.baidu.com")  #指定请求的地址
		c.setopt(pycurl.USERAGENT,"Mozilla/5.2 (compatible; MSIE 6.0; Windows NT 5.1;
		SV1; .NET CLR 1.1.4322; .NET.CLR 2.0.50324)") # 指定请求HTTP头的user-agent
		c.setopt(pycurl.HEADERFUNCTION,getheader) #将返回的http header 定向到回调函数getheader
		c.setopt(pycurl.WRITEFUNCTION,getbody)  #将返回的内容定向到回调函数getbody
		
		c.getinfo(pycurl.HTTP_CODE)  #返回http的状态码
		c.getinfo(pycurl.TOTAL_TIME) #传输结束消耗的总时间
		c.getinfo(pycurl.NAMELOOKUP_TIME) #DNS解析消耗的时间
		c.getinfo(pycurl.CONNECT_TIME) #建立连接消耗的时间
		c.getinfo(pycurl.PRETRANSFER_TIME)  #从建立连接到准备传输所消耗的时间
		c.getinfo(pycurl.STARTTRANSFER_TIME) #从建立连接到传输开始消耗的时间
		c.getinfo(pycurl.REDIRECT_TIME)  #重定向消耗的时间
		c.getinfo(pycurl.SIZE_UPLOAD)   #上传数据包大小
		c.getinfo(pycurl.SIZE_DOWNLOAD) #下载数据包大小
		c.getinfo(pycurl.SPEED_DOWNLOAD)  #平均下载速度
		c.getinfo(pycurl.SPEED_UPLOAD)   #平均上传速度
		c.getinfo(pycurl.HEADER_SIZE)   #HTTP头部大小
		
		
		